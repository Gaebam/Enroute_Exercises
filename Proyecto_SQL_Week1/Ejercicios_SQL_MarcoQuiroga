

Acceso y desplegado de datos

1. SELECT ENAME as 'Nombre', HIREDATE as 'Fecha de Contratacion' FROM EMP;
2. SELECT HIREDATE as 'Fecha de Contratacion', ENAME as 'Nombre' FROM EMP;
3. SELECT ENAME as 'Employee' FROM EMP WHERE SAL>2000.00;
4. SELECT ENAME as 'Employee' FROM EMP WHERE JOB NOT IN ('CLERK', 'SALESMAN') ORDER BY ENAME;
5. SELECT ENAME as 'Employee' FROM EMP WHERE ENAME LIKE '%S%';
6. SELECT ENAME as 'Name', SAL as 'Salary' FROM EMP where COMM>SAL;
7. SELECT ENAME as 'Employee' FROM EMP where YEAR(HIREDATE) = '1981';
8. SELECT ENAME as 'Employee', JOB as 'Job'  FROM EMP WHERE DEPTNO IN(10,20);

Tablas NATION e INVENTION 

9. SELECT INVENTION as 'Invention', YEAR as 'Year' FROM INVENTION WHERE INVENTOR='Edison';
10. SELECT NATION as 'Nation' FROM NATION WHERE CAPITAL IN('Wellington','Georgetown');
11. SELECT NATION as 'Nation' FROM NATION WHERE POPULATION BETWEEN 230000 and 820000 ORDER BY NATION ASC;
-12. SELECT INVENTOR, INVENTION FROM INVENTION WHERE YEAR NOT BETWEEN 1800 and 1900 ORDER BY INVENTION;


Creacion y Mantenimiento a tablas y vistas

1. CREATE TABLE EMPTEST SELECT * FROM EMP;
2. AlTER TABLE EMPTEST ADD SEX CHAR(1);
3. AlTER TABLE EMPTEST MODIFY COLUMN SEX CHAR(6);
4. CREATE VIEW emp_no_money AS SELECT empno, ename, job, mgr, hiredate, deptno FROM EMP;
5. SELECT  table_schema, table_name, view_definition FROM information_schema.views WHERE table_name = 'emp_no_money';
6. SELECT ENAME, HIREDATE FROM emp_no_money;
7. SELECT ename, sal FROM emp_no_money;
--- Unknown column 'sal' in 'field list'
--- La columna 'sal' no esta en la vista.
8. CREATE VIEW emp_deptno_ten(name, dno, eno) AS SELECT ename, deptno, empno FROM EMP WHERE deptno=10;
9. SELECT * FROM emp_deptno_ten;
10. DROP VIEW emp_deptno_ten;


INSERT, UPDATE, DELETE Y UPDATE DE DATOS

1. INSERT INTO EMP VALUES(7990,'QUIROGA','MARCO',7802,'1995-07-11',2000.00,NULL,10);
2. INSERT INTO DEPT VALUES(99,'EDUCATION','MAUI');
3. UPDATE EMP SET SAL=SAL+1000 WHERE ENAME='QUIROGA';
4. DELETE FROM EMP WHERE ENAME='QUIROGA';
5. CREATE VIEW emp_deptno_ten(name, dno, eno) AS SELECT ename, deptno, empno FROM EMP WHERE deptno=10;
6. UPDATE emp_deptno_ten SET dno=20 WHERE name='KING';
-- La vista quitó el registro con el nombre 'King' ya que no cumple con la restricciòn de "deptno=10";
13. 
14.
15.


Referencia a tipos de dato y funciones en consultas

1. SELECT UCASE(INVENTION) FROM INVENTION;
2. SELECT ENAME as Name, TIMESTAMPDIFF(MONTH, HIREDATE, CURDATE()) as 'Month Dif' FROM EMP ORDER BY TIMESTAMPDIFF(MONTH, HIREDATE, CURDATE()) ASC;
3. SELECT ENAME, coalesce(SAL+COMM, SAL, COMM) as 'Total Comp', DATE_FORMAT(HIREDATE, '%D %M, %Y') as 'HireDate' FROM EMP WHERE SAL>2*COMM;
-- Se estableció que si el empleado no tiene comisión, no entrará en la condición de "SAL>2*COMM"
4. SELECT LOWER(ENAME), ROUND(SAL,-2) FROM EMP;
5. SELECT INVENTION, YEAR(CURDATE())-YEAR as 'YEAR DIFF' FROM INVENTION WHERE INVENTION = 'Coifon Gin';
6. SELECT CONCAT(UCASE(LEFT(INVENTOR,8)), ' invented the ', INVENTION) as 'Machine\'s Inventors' FROM INVENTION WHERE INVENTION LIKE '%machine%';
7. SELECT * FROM EMP WHERE COMM IS NOT NULL;
8. SELECT CONCAT(ENAME, ' gana ', SAL, ' mensualmente pero quiere ', SAL*3) as 'Salary wanted' FROM EMP;


Recupere renglones basandonse en grupos.

1. SELECT MAX(YEAR) as 'Mas reciente', MIN(YEAR) as 'Mas antigua' FROM INVENTION;
2. SELECT count(DISTINCT INVENTION) FROM INVENTION;
3. SELECT count(DISTINCT NATION_CODE) FROM INVENTION;
-- Show all the nation_code without repeat them.
4. SELECT NATION_CODE, count(INVENTOR) FROM INVENTION GROUP BY NATION_CODE;
5. SELECT LEFT(NATION,1), 'Nations', SUM(AREA) FROM NATION WHERE NATION LIKE('A%') OR NATION LIKE ('B%') OR NATION LIKE ('C%') GROUP BY LEFT(NATION,1);

JOIN DE MULTIPLES TABLAS
2. SELECT E.ENAME, D.DNAME, D.LOC FROM EMP E JOIN DEPT D ON D.DEPTNO = E.DEPTNO WHERE ENAME='SMITH'; 
3. SELECT I.INVENTOR, N.NATION FROM INVENTION I JOIN NATION N ON I.NATION_CODE = N.CODE WHERE INVENTOR LIKE 'B%';
4. SELECT N.NATION, COUNT(I.INVENTION) FROM INVENTION I JOIN NATION N ON I.NATION_CODE = N.CODE GROUP BY N.NATION;
5. SELECT INVENTION FROM INVENTION WHERE YEAR IN(SELECT YEAR FROM INVENTION WHERE INVENTOR='BENZ');
6. SELECT NATION, POPULATION FROM BORDER B JOIN NATION N ON B.NATION_CODE=N.CODE GROUP BY NATION_CODE HAVING COUNT(NATION_CODE) > 3;
7. SELECT NATION, POPULATION FROM NATION WHERE CODE NOT IN (SELECT NATION_CODE FROM BORDER) AND AREA >= (SELECT AREA FROM NATION WHERE CODE=77);
--- Se establecio que los paises son islas si no tienen ningún país fronterizo en la tabla BORDER.  
8. SELECT N.NATION, N2.NATION as 'Pais Fronterizo' FROM NATION N LEFT JOIN BORDER B ON B.NATION_CODE=N.CODE JOIN NATION N2 ON N2.CODE=BORDER_CODE;


